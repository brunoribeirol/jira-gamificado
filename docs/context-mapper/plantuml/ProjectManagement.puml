@startuml
skinparam componentStyle uml2

package "'ProjectManagement' Aggregate" <<Rectangle>> {

    ' ========== ENTITIES ==========
    class Project <<(A,#fffab8) Aggregate Root>> {
        - ProjectId id
        - String name
        - String description
        - TeamId teamId
        - List<Task> tasks
        - List<Challenge> challenges
        - List<String> kanbanColumns

        + addTask(task: Task)
        + addChallenge(challenge: Challenge)
    }

    class Task {
        - TaskId id
        - String title
        - String description
        - List<MemberId> assignees
        - String kanbanColumn
        - int points
        - String createdAt
        - String completedAt
        - ProjectId projectId

        + assignTo(memberId: MemberId)
        + moveToColumn(column: String)
        + setPoints(points: int)
        + initializePoints(strategy: TaskScoreStrategy)
        + complete(strategy: TaskScoreStrategy)
        + markAsCompleted()
        + unlockBy(member: Member)
        + setTitle(newTitle: String)
    }

    class Challenge {
        - ChallengeId id
        - String title
        - String description
        - String criteria
        - int extraPoints
        - MemberId createdBy
        - ProjectId projectId
        - String deadline
    }

    ' ========== VALUE OBJECTS ==========
    class ProjectId <<(V,DarkSeaGreen) Value Object>> {
        + int value
    }

    class TaskId <<(V,DarkSeaGreen) Value Object>> {
        + int value
    }

    class ChallengeId <<(V,DarkSeaGreen) Value Object>> {
        + int value
    }

    class TeamId <<(V,DarkSeaGreen) Value Object>> {
        + int value
    }

    class MemberId <<(V,DarkSeaGreen) Value Object>> {
        + int value
    }

    ' ========== STRATEGY ==========
    interface TaskScoreStrategy <<(S,Wheat) Strategy>> {
        + calculatePoints(basePoints: int): int
    }

    class BonusForPairProgrammingStrategy implements TaskScoreStrategy {
        - int bonus
        + calculatePoints(basePoints: int): int
    }

    class DefaultScoreStrategy implements TaskScoreStrategy {
        + calculatePoints(basePoints: int): int
    }

    ' ========== TEMPLATE METHOD ==========
    abstract class TaskCompletionTemplate <<(S,Wheat) Template>> {
        + complete(task: Task, strategy: TaskScoreStrategy, member: Member)
        + validateTask(task: Task)
        + calculateScore(task: Task, strategy: TaskScoreStrategy)
        + notifyMember(task: Task, member: Member)
        + persist(task: Task, member: Member)
    }

    ' ========== DOMAIN EVENT ==========
    class TaskCompletedEvent <<(S,Wheat) DomainEvent>> {
        + Task task
        + Member member
    }

    ' ========== REPOSITORIES ==========
    class ProjectRepository <<(R,LightBlue) Repository>> {
        + save(project: Project)
        + findById(id: ProjectId): Project
        + findAll(): List<Project>
        + deleteById(id: ProjectId)
    }

    class TaskRepository <<(R,LightBlue) Repository>> {
        + save(task: Task)
        + saveWithProject(task: Task, projectId: ProjectId)
        + findById(id: TaskId): Task
        + findByProjectId(id: ProjectId): List<Task>
        + deleteById(id: TaskId)
    }

    class ChallengeRepository <<(R,LightBlue) Repository>> {
        + save(challenge: Challenge)
        + findById(id: ChallengeId): Challenge
        + deleteById(id: ChallengeId)
        + findAllByProjectId(id: ProjectId): List<Challenge>
    }

    ' ========== SERVICES ==========
    class ProjectService <<(S,Wheat) Service>> {
        + createProject(project: Project)
        + getById(id: ProjectId): Project
        + getAll(): List<Project>
        + update(project: Project)
        + delete(id: ProjectId)
        + addTaskToProject(id: ProjectId, task: Task, assignedMemberId: int)
    }

    class TaskService <<(S,Wheat) Service>> {
        + assignTaskToMember(id: TaskId, memberId: MemberId)
        + updateTaskTitle(id: TaskId, newTitle: String)
        + completeTask(id: TaskId, memberId: MemberId)
        + moveTaskToColumn(id: TaskId, column: String)
        + delete(id: TaskId)
        + addTaskToProject(id: ProjectId, task: Task, assignedMemberId: int)
        + createTask(task: Task)
        + getById(id: TaskId): Task
        + listByProject(id: ProjectId): List<Task>
        + unlockTask(id: TaskId, memberId: MemberId)
    }

    class ChallengeService <<(S,Wheat) Service>> {
        + addToProject(id: ProjectId, challenge: Challenge)
        + getById(id: ChallengeId): Challenge
        + update(challenge: Challenge)
        + delete(id: ChallengeId)
        + listByProject(id: ProjectId): List<Challenge>
    }

    ' ========== RELATIONSHIPS ==========
    Project --> ProjectId
    Project --> Task
    Project --> Challenge
    Project --> TeamId

    Task --> TaskId
    Task --> MemberId
    Task --> ProjectId

    Challenge --> ChallengeId
    Challenge --> MemberId
    Challenge --> ProjectId

    Task --> TaskScoreStrategy
    Task --> Member

    BonusForPairProgrammingStrategy --> TaskScoreStrategy
    DefaultScoreStrategy --> TaskScoreStrategy

    TaskCompletionTemplate --> Task
    TaskCompletedEvent --> Task
    TaskCompletedEvent --> Member
}

legend left
  This bounded context implements the subdomain 'ProjectManagement'.\n
  S = Service, R = Repository, A = Aggregate Root, V = Value Object
end legend
@enduml
