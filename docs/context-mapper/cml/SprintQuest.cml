Domain SprintQuest {
    Subdomain ProjectManagement
    Subdomain Gamification
    Subdomain TeamsAndUsers
}

ContextMap SprintQuestContextMap {
    contains ProjectManagement
    contains Gamification
    contains TeamsAndUsers

    ProjectManagement Shared-Kernel TeamsAndUsers
    Gamification Shared-Kernel TeamsAndUsers
}

BoundedContext ProjectManagement implements ProjectManagement {
    Aggregate ProjectManagement {
        Entity Project {
            aggregateRoot
            -ProjectId id
            String name
            String description
            List<TaskId> tasks
            List<ChallengeId> challenges
            List<String> kanbanColumns
            -TeamId teamId
        }

        Entity Task {
            aggregateRoot
            -TaskId id
            String title
            String description
            List<MemberId> assignees
            String kanbanColumn
            Integer points
            Date createdAt
            Date? completedAt
        }

        Entity Challenge {
            aggregateRoot
            -ChallengeId id
            String title
            String description
            String criteria
            Integer extraPoints
            MemberId createdBy
            ProjectId projectId
            Date deadline
        }

        ValueObject ProjectId { int id }
        ValueObject TaskId { int id }
        ValueObject ChallengeId { int id }
        ValueObject TeamId { int id }
        ValueObject MemberId { int id }

        Repository ProjectRepository {
            Optional<Project> findById(@ProjectId id)
            void save(Project project)
            void deleteById(@ProjectId id)
        }

        Repository TaskRepository {
            Optional<Task> findById(@TaskId id)
            void save(Task task)
            void deleteById(@TaskId id)
        }

        Repository ChallengeRepository {
            Optional<Challenge> findById(@ChallengeId id)
            void save(Challenge challenge)
            void deleteById(@ChallengeId id)
        }

        Service ProjectService {
            void createProject(@ProjectId projectId, @String name, @String description);
            void addTask(@ProjectId projectId, @TaskId taskId);
            void moveTask(@TaskId taskId, @String targetColumn);
            void completeTask(@TaskId taskId);
            void addChallenge(@ProjectId projectId, @ChallengeId challengeId);
        }
    }
}

BoundedContext Gamification implements Gamification {
    Aggregate Gamification {
        Entity Reward {
            aggregateRoot
            -RewardId id
            String description
            Integer requiredPoints
            RewardType type
            MemberId createdBy
        }

        ValueObject RewardId { int id }

        ValueObject RewardType {
            enum CUPOM
            enum FOLGA
            enum DESTAQUE
        }

        Repository RewardRepository {
            Optional<Reward> findById(@RewardId id)
            void save(Reward reward)
            void deleteById(@RewardId id)
            List<Reward> findAll()
            List<Reward> findRewardsAvailableForPoints(@int points)
        }

        Service RewardService {
            void createReward(@Reward reward);
            Optional<Reward> getRewardById(@RewardId rewardId);
            List<Reward> getAllRewards();
            List<Reward> getRewardsAvailableForPoints(@int points);
            void deleteReward(@RewardId rewardId);
        }
    }
}

BoundedContext TeamsAndUsers implements TeamsAndUsers {
    Aggregate TeamsAndUsers {
        Entity Team {
            aggregateRoot
            -TeamId id
            String name
            MemberId leader
            List<MemberId> members
            Integer teamScore
        }

        Entity Member {
            aggregateRoot
            -MemberId id
            String name
            String email
            String password
            Role role
            int individualScore
            List<RewardId> unlockedRewards
        }

        Entity Feedback {
            aggregateRoot
            -FeedbackId id
            String message
            Date date
            MemberId givenBy
            MemberId receivedBy
            TaskId? relatedTask
        }

        ValueObject TeamId { int id }
        ValueObject FeedbackId { int id }

        ValueObject Role {
            enum DEV
            enum QA
            enum PO
            enum LIDER
        }

        Repository TeamRepository {
            Optional<Team> findById(@TeamId id)
            void save(Team team)
            void delete(Team team)
        }

        Service MemberTeamService {
            void createTeam(@TeamId teamId, @String teamName);
            void addMember(@TeamId teamId, @MemberId memberId, @Role role);
            List<RewardId> getUnlockedRewards(@MemberId memberId);
            int getScore(@MemberId memberId);
            List<Feedback> getReceivedFeedbacks(@MemberId memberId);
        }

        Repository MemberRepository {
            Optional<Member> findById(@MemberId id)
            void save(Member member)
            void delete(Member member)
        }
    }
}