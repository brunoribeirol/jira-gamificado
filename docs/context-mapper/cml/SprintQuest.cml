Domain SprintQuest {
    Subdomain Gamification
    Subdomain ProjectManagement
    Subdomain TeamsMembers
    Subdomain Shared
}

ContextMap SprintQuestContextMap {
    contains Gamification
    contains ProjectManagement
    contains TeamsMembers
    contains Shared

    ProjectManagement [SK]<->[SK] TeamsMembers
    ProjectManagement [SK]<->[SK] Gamification
    TeamsMembers [SK]<->[SK] Gamification
    ProjectManagement [SK]<->[SK] Shared
    TeamsMembers [SK]<->[SK] Shared
    Gamification [SK]<->[SK] Shared
}



BoundedContext Gamification implements Gamification {
    Aggregate Reward {
        Entity Reward {
            aggregateRoot
            - RewardId id
            String description
            int requiredPoints
            - RewardType type
            - MemberId createdBy

            def boolean canBeUnlockedBy(int points)
        }

        ValueObject RewardId {
            int value
        }

        Enum RewardType {
            CUPOM,
            FOLGA,
            DESTAQUE
        }
    }

    Repository RewardRepository {
        save(reward: Reward)
        findById(rewardId: RewardId): Reward
        findAll(): List<Reward>
        findRewardsAvailableForPoints(points: int): List<Reward>
        deleteById(rewardId: RewardId)
    }

    Service RewardService {
        createReward(reward: Reward)
        getRewardById(rewardId: RewardId): Reward
        getAllRewards(): List<Reward>
        getRewardsAvailableForPoints(points: int): List<Reward>
        deleteReward(rewardId: RewardId)
    }
}


BoundedContext ProjectManagement implements ProjectManagement {

    Aggregate Project {
        Entity Project {
            aggregateRoot
            id: ProjectId
            name: String
            description: String
            teamId: TeamId
            tasks: List<Task>
            challenges: List<Challenge>
            kanbanColumns: List<String>

            def addTask(task: Task)
            def addChallenge(challenge: Challenge)
        }

        Entity Task {
            id: TaskId
            title: String
            description: String
            assignees: List<MemberId>
            kanbanColumn: String
            points: int
            createdAt: String
            completedAt: String nullable
            projectId: ProjectId

            def assignTo(memberId: MemberId)
            def moveToColumn(column: String)
            def setPoints(points: int)
            def initializePoints(strategy: TaskScoreStrategy)
            def complete(strategy: TaskScoreStrategy)
            def markAsCompleted()
            def unlockBy(member: Member)
            def setTitle(newTitle: String)
        }

        Entity Challenge {
            id: ChallengeId
            title: String
            description: String
            criteria: String
            extraPoints: int
            createdBy: MemberId
            projectId: ProjectId
            deadline: String
        }

        ValueObject ProjectId { value: int }
        ValueObject TaskId { value: int }
        ValueObject ChallengeId { value: int }
        ValueObject TeamId { value: int }
    }

    Repository ProjectRepository {
        save(project: Project)
        findById(id: ProjectId): Project
        findAll(): List<Project>
        deleteById(id: ProjectId)
    }

    Repository TaskRepository {
        save(task: Task)
        saveWithProject(task: Task, projectId: ProjectId)
        findById(id: TaskId): Task
        findByProjectId(id: ProjectId): List<Task>
        deleteById(id: TaskId)
    }

    Repository ChallengeRepository {
        save(challenge: Challenge)
        findById(id: ChallengeId): Challenge
        deleteById(id: ChallengeId)
        findAllByProjectId(id: ProjectId): List<Challenge>
    }

    Service ProjectService {
        createProject(project: Project)
        getById(id: ProjectId): Project
        getAll(): List<Project>
        update(project: Project)
        delete(id: ProjectId)
        addTaskToProject(id: ProjectId, task: Task, assignedMemberId: int)
    }

    Service TaskService {
        assignTaskToMember(id: TaskId, memberId: MemberId)
        updateTaskTitle(id: TaskId, newTitle: String)
        completeTask(id: TaskId, memberId: MemberId)
        moveTaskToColumn(id: TaskId, column: String)
        delete(id: TaskId)
        addTaskToProject(id: ProjectId, task: Task, assignedMemberId: int)
        createTask(task: Task)
        getById(id: TaskId): Task
        listByProject(id: ProjectId): List<Task>
        unlockTask(id: TaskId, memberId: MemberId)
    }

    Service ChallengeService {
        addToProject(id: ProjectId, challenge: Challenge)
        getById(id: ChallengeId): Challenge
        update(challenge: Challenge)
        delete(id: ChallengeId)
        listByProject(id: ProjectId): List<Challenge>
    }

    Interface TaskScoreStrategy {
        def calculatePoints(basePoints: int): int
    }

    Implementation BonusForPairProgrammingStrategy implements TaskScoreStrategy {
        bonus: int
        def calculatePoints(basePoints: int): int
    }

    Implementation DefaultScoreStrategy implements TaskScoreStrategy {
        def calculatePoints(basePoints: int): int
    }

    Template TaskCompletionTemplate {
        def complete(task: Task, strategy: TaskScoreStrategy, member: Member)
        def validateTask(task: Task)
        def calculateScore(task: Task, strategy: TaskScoreStrategy)
        def notifyMember(task: Task, member: Member)
        def persist(task: Task, member: Member)
    }

    DomainEvent TaskCompletedEvent {
        task: Task
        member: Member
    }
}


BoundedContext TeamsMembers implements TeamsMembers {

    Aggregate Member {

        Entity Member {
            aggregateRoot
            id: MemberId
            name: String
            email: String
            password: String
            role: Role
            individualScore: int
            receivedFeedbacks: List<Feedback>
            unlockedRewards: List<RewardId>
            isAdmin: boolean
            teamId: TeamId

            def changeRole(newRole: Role)
            def addPoints(points: int)
            def spendPoints(points: int)
            def receiveFeedback(feedback: Feedback)
            def unlockReward(rewardId: RewardId)
            def promoteToAdmin()
            def demoteFromAdmin()
            def belongsToTeam(otherTeamId: TeamId): boolean
        }

        Entity Feedback {
            id: FeedbackId
            message: String
            date: String
            givenBy: MemberId
            receivedBy: MemberId
            relatedTask: TaskId nullable
        }

        Entity Team {
            id: TeamId
            name: String
            leaderId: MemberId
            members: List<MemberId>
            teamScore: int

            def addMember(memberId: MemberId)
            def removeMember(memberId: MemberId)
            def addPoints(points: int)
        }

        ValueObject FeedbackId { value: int }
        ValueObject TeamId { value: int }

        enum Role {
            DEV,
            QA,
            PO,
            LIDER
        }
    }

    Repository MemberRepository {
        save(member: Member)
        findById(memberId: MemberId): Member
        findByEmail(email: String): Member
        findAll(): List<Member>
        delete(member: Member)
    }

    Repository FeedbackRepository {
        save(feedback: Feedback)
        findById(id: FeedbackId): Feedback
        findByReceivedBy(memberId: MemberId): List<Feedback>
    }

    Repository TeamRepository {
        save(team: Team)
        findById(teamId: TeamId): Team
        delete(team: Team)
    }

    Service MemberService {
        addPoints(memberId: MemberId, points: int)
        addFeedback(memberId: MemberId, feedback: Feedback)
        unlockReward(memberId: MemberId, rewardId: RewardId)
        createMember(member: Member)
        getById(memberId: MemberId): Member
        getAll(): List<Member>
    }

    Service MemberTeamService {
        createTeam(teamId: TeamId, teamName: String)
        addMember(teamId: TeamId, memberId: MemberId, role: Role)
        getUnlockedRewards(memberId: MemberId): List<RewardId>
        getScore(memberId: MemberId): int
        getReceivedFeedbacks(memberId: MemberId): List<Feedback>
        createMember(member: Member)
    }

    Service TeamService {
        addPoints(teamId: TeamId, points: int)
        getById(teamId: TeamId): Team
    }
}

BoundedContext Shared implements Shared {
    ValueObject MemberId {
        value: int
    }
}
